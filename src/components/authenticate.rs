use rocket::request::FlashMessage;
// use rocket::tokio;
// use std::process::Command;
// use std::fs;
use yew::prelude::*;
use super::Head;


#[derive(Properties, PartialEq)]
pub struct AuthError { msg: String }
impl From<Option<FlashMessage<'_>>> for AuthError {
    fn from(value: Option<FlashMessage>) -> Self {
        Self { msg: match &value {
            Some(value) => value.message(),
            None => ""
        }.to_string() }
    }
}


#[function_component]
pub fn Login(error: &AuthError) -> yew::Html {
    html! {
        <html lang="en">
            <Head title="Login">
                <link rel="stylesheet" href="auth.css"/>
            </Head>
            <body>
                <main>
                    <h1>{ "Log in" }</h1>
                    <p id="auth-error-msg">{ &error.msg }</p>
                    <form action="login" method="post">
                        <div>
                            <label for="username">{ "Username: " }</label>
                            <input type="text" name="username" id="username"/>
                        </div>
                        <div>
                            <label for="password">{ "Password: " }</label>
                            <input type="password" name="password" id="password"/>
                        </div>
                        <p id="flash-msg" style="color: red"></p>
                        <input type="submit" value="Log In"/>
                    </form>
                </main>
            </body>
        </html>
    }
}

#[function_component]
pub fn Register(error: &AuthError) -> yew::Html {
    html! {
        <html lang="en">
            <Head title="Register">
                <link rel="stylesheet" href="auth.css"/>
            </Head>
            <body>
                <main>
                    <h1>{ "Register (Requires admin approval)" }</h1>
                    <p id="auth-error-msg">{ &error.msg }</p>
                    <form action="register" method="post">
                        <div>
                            <label for="username">{ "Username: " }</label>
                            <input type="text" name="username" id="username"/>
                        </div>
                        <div>
                            <label for="password">{ "Password: " }</label>
                            <input type="password" name="password" id="password"/>
                        </div>
                        <p id="flash-msg" style="color: red"></p>
                        <input type="submit" value="Register"/>
                    </form>
                </main>
            </body>
        </html>
    }
}

#[function_component]
pub fn AdminRegister(error: &AuthError) -> yew::Html {
    use crate::auth::db::ADMIN_USR_ID;

    html! {
        <html lang="en">
            <Head title="Register Admin">
                <link rel="stylesheet" href="auth.css"/>
            </Head>
            <body>
                <main>
                    <h1>{ "Register New \"Admin\" account" }</h1>
                    <p>{ "The user ID for the \"Admin\" account is " }<code>{ ADMIN_USR_ID }</code>{ "." }</p>
                    <p>{ "Choose a secure password for Admin. Preferably generated by your password manager." }</p>
                    <p id="auth-error-msg">{ &error.msg }</p>
                    <form action="admin-register" method="post">
                        // <input type="text" name="username" id="username" value={ ADMIN_USR_ID } style="display: none"/>
                        <div>
                            <label for="password">{ "Password: " }</label>
                            <input type="password" name="password" id="password"/>
                        </div>
                        <p id="flash-msg" style="color: red"></p>
                        <input type="submit" value="Register"/>
                    </form>
                </main>
            </body>
        </html>
    }
}

// #[tokio::main]
// pub async fn static_render() {
//     Command::new("mkdir")
//         .arg("-p")
//         .arg(&*super::RENDER_ROOT)
//         .output().unwrap();

//     let files = [
//         ("login", yew::ServerRenderer::<Login>::new().render().await),
//         ("register", yew::ServerRenderer::<Register>::new().render().await),
//         ("admin-register", yew::ServerRenderer::<AdminRegister>::new().render().await),
//     ];

//     for (name, html) in files {
//         fs::write(
//             super::RENDER_ROOT.join(format!("{name}.html")),
//             {
//                 let mut doctype = "<!DOCTYPE html>".to_string();
//                 doctype.push_str(&html);
//                 doctype
//             }
//         ).expect("Could not save file to target/static-html")
//     }
// }
